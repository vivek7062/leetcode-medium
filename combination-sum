// Question - https://leetcode.com/problems/combination-sum/
// Answer in cpp

class Solution {
    vector<vector<int>> ans;
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<int> temp;
        dfs(0,target,candidates,temp);
        return ans;
    }
    
    void dfs(int index,int target,vector<int>& candidates,vector<int> &temp){
        if(index==candidates.size() || target<=0){
            if(target==0) ans.push_back(temp);
            return;
        }
        
        if(target-candidates[index]<=target){
            temp.push_back(candidates[index]);
            dfs(index,target-candidates[index],candidates,temp);
            temp.pop_back();
        }
        dfs(index+1,target,candidates,temp);
    }
    
};
