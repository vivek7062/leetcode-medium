// Question - https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/
// Answer in cpp


class Solution {
    map<int,int> mp;
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int len1 = inorder.size()-1, len2 = postorder.size()-1;
        if(len1!=len2) return NULL;
        for(int i=0;i<inorder.size();i++) mp[inorder[i]]=i;
        return dfs(inorder,postorder,0,len1,0,len1);
    }
    TreeNode* dfs(vector<int>& inorder, vector<int>& postorder, int is, int ie, int ps, int pe){
        if(is>ie || ps>pe) return NULL;
        TreeNode* root = new TreeNode(postorder[pe]);
        int rootIndex = mp[postorder[pe]];
        int leftNode = rootIndex-is;
        root->left = dfs(inorder, postorder, is, rootIndex-1,ps,ps+leftNode-1);
        root->right = dfs(inorder, postorder, rootIndex+1, ie,ps+leftNode,pe-1);
        return root;
    }
    
};
