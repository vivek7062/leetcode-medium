// Question - https://leetcode.com/problems/implement-trie-prefix-tree/
// Answer in cpp


class TrieNode
{
public:
    TrieNode *child[26];
    bool isEnd=false;
};
class Trie {
    TrieNode *trie;
public:
    Trie() {
       trie = new TrieNode(); 
    }
    
    void insert(string words) {
        TrieNode *node = trie;
        for(int i=0;i<words.size();i++){
              if(node->child[words[i]-'a']==NULL){
                  node->child[words[i]-'a']= new TrieNode();
                  
              }
              node = node->child[words[i]-'a'];
        }
        node->isEnd = true;

    }
    
    bool search(string word) {
        TrieNode *node = trie;
        for(int i=0;i<word.size();i++){
              if(node->child[word[i]-'a']==NULL){
                  return false;
              }
              node = node->child[word[i]-'a'];
        }
        return node->isEnd;
    }
    
    bool startsWith(string prefix) {
        TrieNode *node = trie;
        for(int i=0;i<prefix.size();i++){
              if(node->child[prefix[i]-'a']==NULL){
                  return false;
              }
              node = node->child[prefix[i]-'a'];
        }
        return true;
    }
};
