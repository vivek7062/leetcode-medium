// Question - https://leetcode.com/problems/jump-game/
// Answer in cpp


Code
DP With Memorization
class Solution {
    vector<int> dp;
public:
    bool canJump(vector<int>& nums) {
        int len = nums.size();
        dp = vector(len,-1);
        return dfs(nums,0,len,nums[0]);
    }

  bool dfs(vector<int>& nums,int index, int len, int maxReach){
        if(index==len-1)  return true;
        if(dp[index]!=-1) return dp[index];
        for(int i=1;i<=maxReach && index+i<len;i++){
            if(dfs(nums,index+i,len,nums[index+i])) return dp[i] = true;
        }
        return dp[index] = false;

    }
Greedy Approach
class Solution {
 public:
     bool canJump(vector<int>& nums) {
         int len = nums.size();
         int reach = 0;
         int i=0;
        for(i=0;i<len && i<=reach;i++){
            reach = max(reach,i+nums[i]);
        }
         return i==len;
     }
};
