//Question - https://leetcode.com/problems/longest-increasing-subsequence/
//Answer in cpp

1. Using DP
Time complexity = O(n^2)
space complexity O(n)
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        
        vector<int> temp(nums.size(),1);
        int len = nums.size();
        int ans=1;
        
        for(int i=0;i<len-1;i++){
            for(int j=i+1;j<len;j++){
                if(nums[i]<nums[j] && temp[i]>=temp[j]){
                    temp[j] = temp[i]+1;
                    ans = max(ans,temp[j]);
                }
            }
        }
        
        return ans;
            
    }
};
Using replace approach
Time Comlexity - O(nlogn)
space complexity O(n)
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
           vector<int> sub;
        
        for(int i=0;i<nums.size();i++){
            if(sub.size()==0 || sub[sub.size()-1]<nums[i]){
                sub.push_back(nums[i]);
            } else{
                auto it = lower_bound(sub.begin(),sub.end(),nums[i]);
                *it = nums[i];
            }
        }
        
        return sub.size();
    }
};
