// Question - https://leetcode.com/problems/minimum-rounds-to-complete-all-tasks/
// Answer in cpp



Approach
We are calculating frequency of each element and calculating rounds like this...

Suppose frequency is 1 means we can't consider (can take 2 or 3 only) so we will return -1
Then frequncy can 2,3,4,5...
if freq == 2 then we can calculate 2/3 + (if % 3 0 means all covered all rounds in 2/3 otherwise means lessthan 3 round are remaining so it will cover in 1 round that's why i am adding 1)
if freq == 3 => 3/3 + 0 = 1

if freq == 4 => 4/3 + 4%3 = 1+1 =2 means it will cover like 2 , 2 and complete in 2 rounds

if freq == 5 => 5/3 + 5%3 = 1+1 =3 means it will cover like 3, 2
and complete in 2 round

After 5 it will repeate again....

Complexity
Time complexity:
O(N)

Space complexity:
O(N)

Code
class Solution {
public:
    int minimumRounds(vector<int>& tasks) {
        int len = tasks.size(), ans=0;
        map<int,int> mp;
        for(auto& val : tasks) mp[val]++;
        for(auto& val : mp){
            int freq = val.second;
            if(freq<2 ) return -1;
            ans  = ans + (freq/3) + (freq%3==0?0:1);
        }
        return ans==0?-1:ans;
    }
};
