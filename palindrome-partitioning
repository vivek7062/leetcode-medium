// Question - https://leetcode.com/problems/palindrome-partitioning/
// Answer in cpp



class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> curr;
        getPartition(ans,curr,s,0);
        return ans;
    }
    
    void getPartition(vector<vector<string>>& ans, vector<string>& curr,string s,int index){
        if(index==s.size()){
            ans.push_back(curr);
            return;
        }
        
        
        for(int i=index;i<s.size();i++){
            if(isPalindrom(s,index,i)){
                curr.push_back(s.substr(index,i-index+1));
                getPartition(ans,curr,s,i+1);
                curr.pop_back();
            }
        }
    }
    
    
    bool isPalindrom(string s , int start, int end){
        while(start<=end){
            if(s[start++]!=s[end--]) return false;
        }
        
        return true;
    }
};
